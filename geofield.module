<?php

/**
 * @file
 * Contains the geofield.module.
 */

use Drupal\Core\Template\Attribute;

/**
 * Point feature constant.
 *
 * @var string
 */
define('GEOFIELD_TYPE_POINT', 'POINT');

/**
 * Multipoint feature constant.
 *
 * @var string
 */
define('GEOFIELD_TYPE_MULTIPOINT', 'MULTIPOINT');

/**
 * Linestring feature constant.
 *
 * @var string
 */
define('GEOFIELD_TYPE_LINESTRING', 'LINESTRING');

/**
 * Multilinestring feature constant.
 *
 * @var string
 */
define('GEOFIELD_TYPE_MULTILINESTRING', 'MULTILINESTRING');

/**
 * Polygon feature constant.
 *
 * @var string
 */
define('GEOFIELD_TYPE_POLYGON', 'POLYGON');

/**
 * Multipolygon feature constant.
 *
 * @var string
 */
define('GEOFIELD_TYPE_MULTIPOLYGON', 'MULTIPOLYGON');

/* *
 * Max length of geohashes (imposed by database column length).
 */
define('GEOFIELD_GEOHASH_LENGTH', 16);

/**
 * Diameter of the Earth in kilometers.
 */
define('GEOFIELD_KILOMETERS', 6371);

/**
 * Diameter of the Earth in meters.
 */
define('GEOFIELD_METERS', 6371000);

/**
 * Diameter of the Earth in miles.
 */
define('GEOFIELD_MILES', 3959);

/**
 * Diameter of the Earth in yards.
 */
define('GEOFIELD_YARDS', 6975175);

/**
 * Diameter of the Earth in feet.
 */
define('GEOFIELD_FEET', 20925525);

/**
 * Diameter of the Earth in nautical miles.
 */
define('GEOFIELD_NAUTICAL_MILES', 3444);

/**
 * Implements hook_theme().
 */
function geofield_theme() {
  return [
    'geofield_proximity' => [
      'render element' => 'element',
    ],
    'geofield_dms' => [
      'variables' => [
        'components' => [],
      ],
    ],
    'geofield_latlon' => [
      'variables' => [
        'lat' => 0,
        'lon' => 0,
      ],
    ],
  ];
}

/**
 * Returns options for radius of the Earth.
 */
function geofield_radius_options() {
  return [
    'GEOFIELD_KILOMETERS' => t('Kilometers'),
    'GEOFIELD_METERS' => t('Meters'),
    'GEOFIELD_MILES' => t('Miles'),
    'GEOFIELD_YARDS' => t('Yards'),
    'GEOFIELD_FEET' => t('Feet'),
    'GEOFIELD_NAUTICAL_MILES' => t('Nautical Miles'),
  ];
}

/**
 * Build SQL query snippet for the haversine formula.
 *
 * @param array $options
 *   The haversine options.
 *   - origin_latitude - the origin latitude (in degrees).
 *   - origin_longitude - the origin longitude (in degrees).
 *   - earth_radius - the earth radius (see the constants at the top).
 *   - destination_latitude - the db field with the latitude.
 *   - destination_longitude - the db field with the longitude.
 *
 * @return string
 *   The generated SQL query snippet for haversine formula.
 */
function geofield_haversine($options = []) {
  $formula = '( :earth_radius * ACOS( COS( RADIANS(:origin_latitude) ) * COS( RADIANS(:destination_latitude) ) * COS( RADIANS(:destination_longitude) - RADIANS(:origin_longitude) ) + SIN( RADIANS(:origin_latitude) ) * SIN( RADIANS(:destination_latitude) ) ) )';

  foreach ($options as $key => $option) {
    if (is_numeric($option)) {
      $formula = str_replace(':' . $key, $option, $formula);
    }
    else {
      $formula = str_replace(':' . $key, db_escape_field($option), $formula);
    }
  }

  return $formula;
}

/**
 * Theme wrapper for geofield_proximity form item.
 *
 * @param array $vars
 *   The variables.
 *
 * @return string
 *   The return markup..
 */
function theme_geofield_proximity(array $vars) {
  $element = $vars['element'];

  $attributes = !empty($element['#wrapper_attributes']) ? $element['#wrapper_attributes'] : ['class' => []];
  $attributes['class'][] = 'geofield-proximity-field-wrapper';
  $attributes['class'][] = 'clearfix';

  $wrapper_attributes = [];
  $wrapper_attributes['class'][] = 'clearfix';

  if (isset($element['#children'])) {
    $element['#children'] = '<div id="' . $element['#id'] . '" ' . new Attribute($wrapper_attributes) . '>' . $element['#children'] . '</div>';
  }

  $output = '<div ' . new Attribute($attributes) . '>' . render($vars) . '</div>';

  return $output;
}

/**
 * Validator function for our element values.
 *
 * @param $value
 * @return bool
 */
function geofield_element_validate_integer_positive($value) {
  if ($value >= 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
